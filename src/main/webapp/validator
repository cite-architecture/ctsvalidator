/*
  validator: a groovlet to run CTS validation tests against
  a given CTS installation.

  copyright (c) 2008-2014 Neel Smith

   This program is free software; you can redistribute it and/or
   modify it under the terms of the GNU General Public License
   as published by the Free Software Foundation; either version 3
   of the License, or (at your option) any later version.
   
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.

   Neel Smith, nsmith@holycross.edu


  Usage:
  The URL of the CTS installation to test should be given in a parameter
  named "url".  The file with the definition of tests and the files
  with valid answers are in the "testsuites/" directory of this groovlet.

   Output:
   An HTML page with one tabular display for each request. (This relies on the fact that the
   tests in tests.xml are grouped by CTS request.)  Totals are also displayed for the whole suite
   of tests.
*/



// Use IBM's Normalizer class to canonicalize UTF-8 text data
import com.ibm.icu.text.Normalizer
// Use XML Unit for XML comparisons
import org.custommonkey.xmlunit.*


import edu.harvard.chs.f1k.GreekNode

def versionInfo ="version designed for CTS specification 5.0.rc.1"


// Two prerequisites for testing:  
// 1) a valid set of test files (the expected data in comparisons)
// 2) a live CTS installation (the actual data in comparisons)

// 1: test file with cts3 suite of tests
boolean testFileOK = false
def testsDir = context.getRealPath("/testsuites")
def testFile = new File(testsDir + "/tests.xml")
if (testFile.exists()) {
    testFileOK = true
}


// 2: requested CTS installaion:
boolean connectionOK = false
HttpURLConnection conn
def url = request.getParameter("url")
def urlObj
def urlErrMsg = ""
try {
  urlObj = new URL(url)
  conn = (HttpURLConnection) urlObj.openConnection()
  conn.connect()

  if (conn.getResponseCode() == 200) {
    connectionOK = true
  } else {
    urlErrMsg = "response status ${conn.getResponseCode()}"
  }
} catch (Exception e) { 
  // leave boolean flag == false
  urlErrMsg = e.toString()
}


if (!testFileOK) {
  println   "<error>ERROR:  Could not open testsuites/tests.xml</error>"

} else if (!urlObj) {
  println   "<error>ERROR: Could not create URL from parameter ${url}</error>" 

} else if (!connectionOK) {
  println   "<error>ERROR:  Could not get connection for url ${url} == ${urlErrMsg}</error>"



} else { // All prerequistes passed:  now read and apply tests

  // organize tests by request:
  def testData = [:]
  def testXml = new XmlSlurper().parse(testFile) // if your testFile is no good, you're in trouble
  testXml.test.each { t ->
    String reqName = t.request
    def record = [t.@id, t.urn, t.otherparams, t.description]

    def reqList
    if (testData[reqName]) {
      reqList = testData[reqName]
    } else {
      reqList = []
    }
    reqList.add(record)
    testData[reqName] = reqList
  }

  def totalTests = 0
  def totalSuccess = 0
  String currentRequest = ""

  html.html {
    head {
      title("Results of testing CTS")
      link(text: "text/css", rel: "stylesheet", href: "validator.css", title: "CHS style")
    }
    body {

      p (class: "menu") {
	mkp.yield "CTS validator (${versionInfo}):  "
	a(href: "home", "Home")
      }
      div(id: "header", "CTS Validator: results")
      p {
	mkp.yield "Site tested: "
	code ("${url}")
      }
      p("Links on test IDs are to the URL used in the test.")




      testData.keySet().each { requestName ->
	currentRequest = requestName
	System.err.println "\nCurrent request now " + currentRequest + "\n"
	h2("${requestName}")


	def currentTests = 0
	def currentSuccess = 0

	def testList = testData[requestName]



	table {
	  tr {
	    th("Test")
	    th("Summary of test")
	    th("Results")
	  }
	  testList.each { test ->
	    String id = test[0]
	    String urn = test[1]
	    String params = test[2]
	    String description = test[3]


	    currentTests++;
	    totalTests++;


	    def req = url + "?request=${requestName}&urn=${urn}&${params}"

	    def actual  = new URL(req).getText("UTF-8")
	    actual = Normalizer.normalize(actual, Normalizer.NFC) 
	    groovy.xml.Namespace ctsns = new groovy.xml.Namespace("http://chs.harvard.edu/xmlns/cts")



	    tr {
	      td {
		a(href: "${req}","${id}")
	      }
	      td {
		a(href: "${req}")
	      }
	      td {
		mkp.yield "${description} (cf. "
		a(href: "testsuites/${id}.xml", "expected result")
		mkp.yield ")"
	      }
	    }
	  }

	  tr {
	    td("")
	    th {
	      mkp.yield "Total for "
	      code("${currentRequest}")
	    }
	    td( "${currentSuccess}/${currentTests}")    
	    
	    }
	}
      }
      p("Total for all requests: successes/total tests = ${totalSuccess}/${totalTests}")
    }
  }
}

/*

<td>
"""

// Read actual and expected data as Strings, use IBM's
// Normalizer to normalize UTF-8 characters, then use
// groovy's DOMBuilder to parse the normalized Strings





def root1 = new  XmlParser().parseText(actual)
groovy.util.Node actualReplyNode  = root1[ctsns.reply][0]
GreekNode gn = new GreekNode("<test>One element</test>\n")
println "<td>ROOT 1: " + actualReplyNode.getClass() + "</td>"


def expected = new File(testsDir + "/${t.@id}.xml").getText("UTF-8")
expected = Normalizer.normalize(expected, Normalizer.NFC)

// Explicitly set both of these before XML-based comparison:
XMLUnit.setIgnoreWhitespace(true)
XMLUnit.setNormalizeWhitespace(true)
XMLUnit.setIgnoreComments(true)

def xmlDiff = new Diff(expected, actual )
if (xmlDiff.identical()) {
  //    println   "<td class='ok'>success</td>"
  //    println "<td></td>"
    currentSuccess++
    totalSuccess++

} else {
  //println   "<td class='fail'>failed</td><td>"
    def details = new DetailedDiff(xmlDiff)
    def allDiffs = details.getAllDifferences()
    //println   "<ul>"
    allDiffs.each {
      //	  println   "<li>${it}</li>"
    }
    //println   "</ul>"
    //println   "</td>"
}


println   "</tr>"
} // textXml.test.each

println   """<tr><td/><th>Total for <code>${currentReq}</code></th><td>${currentSuccess}/${currentTests}</td></tr>

</table>
<p>

</p>
</body>
</html>
"""





} // all preconditions met
  */

